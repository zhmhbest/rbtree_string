//!@file 这是 insert 的一个子过程。

//!{Case:3} 【红叔】该情况可能导致冲突向上传递。
    /*...........................→...........................*
     *............[B]............→............[R]............*
     *.............G.............→.........N.=.G.............*
     *............/.\............→............/.\............*
     *.........../...\...........→.........../...\...........*
     *........../.....\..........→........../.....\..........*
     *......[R]P.......U[R]......→......[B]P.......U[B]......*
     *...........................→...........................*/

    /*...........................→...........................*
     *............[B]............→............[R]............*
     *.............G.............→.........N.=.G.............*
     *............/.\............→............/.\............*
     *.........../...\...........→.........../...\...........*
     *........../.....\..........→........../.....\..........*
     *......[R]U.......P[R]......→......[B]U.......P[B]......*
     *...........................→...........................*/
#define RBTM_InsertCaseRedUncle(node, parent, grandpa, uncle) \
    RBTM_SetColor((grandpa), RBT_RED);      \
    RBTM_SetColor((parent) , RBT_BLACK);    \
    RBTM_SetColor((uncle)  , RBT_BLACK);    \
    (node) = (grandpa);


//!{Case:4-B}【黑叔B】
   /*...........................→...........................*
    *............[B]............→............[B]............*
    *.............G.............→.............G.............*
    *............/.\............→............/.\............*
    *.........../...\...........→.........../...\...........*
    *........../.....\..........→........../.....\..........*
    *......[R]P.......U[B]......→......[R]N.=.P...U[B]......*
    *.........\.................→......./...................*
    *.........N[R]..............→..[R]P.=.N.................*
    *...........................→...........................*/

   /*...........................→...........................*
    *............[B]............→............[B]............*
    *.............G.............→.............G.............*
    *............/.\............→............/.\............*
    *.........../...\...........→.........../...\...........*
    *........../.....\..........→........../.....\..........*
    *......[B]U.......P[R]......→......[B]U...P.=.N[R]......*
    *................./.........→...................\.......*
    *..............[R]N.........→.................N.=.P[R]..*
    *...........................→...........................*/
#define RBTM_InsertCaseBlackUncleB(judge, tree, node, parent, rotateFun) \
if( judge ) {                       \
    rotateFun(tree, parent);        \
    node   = parent;                \
    parent = RBTM_GetParent(node);  \
}

//!{Case:4-A}【黑叔A】
   /*...........................→...........................*
    *............[B]............→............[B]............*
    *.............G.............→.............P.............*
    *............/.\............→............/.\............*
    *.........../...\...........→.........../...\...........*
    *........../.....\..........→........../.....\..........*
    *......[R]P.......U[B]......→......[R]N.......G[R]......*
    *......./.\.................→................./.\.......*
    *..[R]N...S[B]..............→..............[B]S...U[B]..*
    *...........................→...........................*/

   /*...........................→...........................*
    *............[B]............→............[B]............*
    *.............G.............→.............P.............*
    *............/.\............→............/.\............*
    *.........../...\...........→.........../...\...........*
    *........../.....\..........→........../.....\..........*
    *......[B]U.......P[R]......→......[R]G.......N[R]......*
    *................./.\.......→......./.\.................*
    *..............[B]S...N[R]..→..[B]U...S[B]..............*
    *...........................→...........................*/
#define RBTM_InsertCaseBlackUncleA(tree, parent, grandpa, rotateFun) \
    rotateFun(tree, grandpa);           \
    RBTM_SetColor(grandpa, RBT_RED);    \
    RBTM_SetColor(parent, RBT_BLACK);

//■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■
//■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■

static inline void rbtree_insertWhileRedParent(RBTreeType tree, RBTNodeType node) {
    RBTNodeType grandpa;
        RBTNodeType parent;
            //RBTNodeType node;
        //RBTNodeType uncle;
    for(;;) {
        parent  = RBTM_GetParent(node);
            if( RBTM_IsBlackOrNull(parent) ) break; //唯一退出条件，双红消失
        /*
            Because : root->color == black && parent->color == red.
            So      : Parent can not be root of tree.
                      Grandpa must exist and be black.
        */
        grandpa = RBTM_GetParent(parent); //grandpa一定存在，不必判NULL。
//■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■
//■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■
        if( RBTM_IsLeftChild(parent) ) {
            #define uncle (grandpa->right)
            if( RBTM_IsRed(uncle) ) {
                #ifdef rbtree_insert_PRINTSTEP
                    printf("Insert: {Case:3L}\n");
                #endif // rbtree_insert_PRINTSTEP
                RBTM_InsertCaseRedUncle(node, parent, grandpa, uncle);
            } else {
                #ifdef rbtree_insert_PRINTSTEP
                    printf("Insert: {Case:4L}\n");
                #endif // rbtree_insert_PRINTSTEP
                RBTM_InsertCaseBlackUncleB(RBTM_IsRightChild(node), tree, node, parent, rbtree_RR);
                RBTM_InsertCaseBlackUncleA(tree, parent, grandpa, rbtree_LL);
            }
            #undef uncle
//■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■
        } else {
//■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■
            #define uncle (grandpa->left)
            if( RBTM_IsRed(uncle) ) {
                #ifdef rbtree_insert_PRINTSTEP
                    printf("Insert: {Case:3R}\n");
                #endif // rbtree_insert_PRINTSTEP
                RBTM_InsertCaseRedUncle(node, parent, grandpa, uncle);
            } else {
                #ifdef rbtree_insert_PRINTSTEP
                    printf("Insert: {Case:4R}\n");
                #endif // rbtree_insert_PRINTSTEP
                RBTM_InsertCaseBlackUncleB(RBTM_IsLeftChild(node), tree, node, parent, rbtree_LL);
                RBTM_InsertCaseBlackUncleA(tree, parent, grandpa, rbtree_RR);
            }
            #undef uncle
        } //end if : RBTM_IsLeftChild(parent)
//■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■
//■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■ ■■
    } //end for
    RBTM_SetColor(tree->root, RBT_BLACK);
}
