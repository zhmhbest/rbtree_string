
//!LeftSpin
#define rbtree_RR rbtree_rotateLeft
/*.........................................→.........................................*
 *....................A....................→....................C....................*
 *.................../.\...................→.................../.\...................*
 *................../...\..................→................../...\..................*
 *................./.....\.................→................./.....\.................*
 *................/.......\................→................/.......\................*
 *.............../.........\...............→.............../.........\...............*
 *............../...........\..............→............../...........\..............*
 *............./.............\.............→............./.............\.............*
 *............B..............(C)...........→............A...............G............*
 *.........................../.\...........→.........../.\............./.............*
 *........................../...\..........→........../...\.........../..............*
 *........................./.....\.........→........./.....\........./...............*
 *........................F.......G........→........B.......F.......N................*
 *.............................../.........→.........................................*
 *.............................[N].........→.........................................*
 *.........................................→.........................................*/

//!RightSpin
#define rbtree_LL rbtree_rotateRight
/*.........................................→.........................................*
 *....................A....................→....................B....................*
 *.................../.\...................→.................../.\...................*
 *................../...\..................→................../...\..................*
 *................./.....\.................→................./.....\.................*
 *................/.......\................→................/.......\................*
 *.............../.........\...............→.............../.........\...............*
 *............../...........\..............→............../...........\..............*
 *............./.............\.............→............./.............\.............*
 *...........(B)..............C............→............D...............A............*
 *.........../.\...........................→.........../.............../.\...........*
 *........../...\..........................→........../.............../...\..........*
 *........./.....\.........................→........./.............../.....\.........*
 *........D.......E........................→........H...............E.......C........*
 *......./.................................→.........................................*
 *.....[H].................................→.........................................*
 *.........................................→.........................................*/

//!左右双旋
#define rbtree_LR(_tree, _node) rbtree_rotateLeft(_tree, _node); rbtree_rotateRight(_tree, _node)
/*.........................................→.........................................→.........................................*
 *....................A....................→....................A....................→....................E....................*
 *.................../.\...................→.................../.\...................→.................../.\...................*
 *................../...\..................→................../...\..................→................../...\..................*
 *................./.....\.................→................./.....\.................→................./.....\.................*
 *................/.......\................→................/.......\................→................/.......\................*
 *.............../.........\...............→.............../.........\...............→.............../.........\...............*
 *............../...........\..............→............../...........\..............→............../...........\..............*
 *............./.............\.............→............./.............\.............→............./.............\.............*
 *............B...............C............→...........(E)..............C............→............B...............A............*
 *.........../.\...........................→.........../.\...........................→.........../.............../.\...........*
 *........../...\..........................→........../...\..........................→........../.............../...\..........*
 *........./.....\.........................→........./.....\.........................→........./.............../.....\.........*
 *........D......(E).......................→........B.......K........................→........D...............K.......C........*
 *.................\.......................→......./.................................→.........................................*
 *.................[K].....................→.....[D].................................→.........................................*
 *.........................................→.........................................→.........................................*/

//!右左双旋
#define rbtree_RL(_tree, _node) rbtree_rotateRight(_tree, _node); rbtree_rotateLeft(_tree, _node)
/*.........................................→.........................................→.........................................*
 *....................A....................→....................A....................→....................F....................*
 *.................../.\...................→.................../.\...................→.................../.\...................*
 *................../...\..................→................../...\..................→................../...\..................*
 *................./.....\.................→................./.....\.................→................./.....\.................*
 *................/.......\................→................/.......\................→................/.......\................*
 *.............../.........\...............→.............../.........\...............→.............../.........\...............*
 *............../...........\..............→............../...........\..............→............../...........\..............*
 *............./.............\.............→............./.............\.............→............./.............\.............*
 *............B...............C............→............B..............(F)...........→............A...............C............*
 *.........................../.\...........→.........................../.\...........→.........../.\...............\...........*
 *........................../...\..........→........................../...\..........→........../...\...............\..........*
 *........................./.....\.........→........................./.....\.........→........./.....\...............\.........*
 *.......................(F)......G........→........................L.......C........→........B.......L...............G........*
 *......................./.................→.................................\.......→.........................................*
 *.....................[L].................→.................................[G].....→.........................................*
 *.........................................→.........................................→.........................................*/

//■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■
//■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■ ■■■■■■■■

#define RBTM_BindRoot(_tree, _node)     _tree->root = _node;   if(_node)   _node->parent = NULL
#define RBTM_BindLeft(_node, _Lnode)    _node->left  = _Lnode; if(_Lnode) _Lnode->parent = _node
#define RBTM_BindRight(_node, _Rnode)   _node->right = _Rnode; if(_Rnode) _Rnode->parent = _node

static void rbtree_rotateLeft(RBTreeType tree, RBTNodeType node) {
/*.........................→.........................*
 *..........p...p..........→..........p...p..........*
 *...........\./...........→...........\./...........*
 *............n............→............R............*
 *.........../.\...........→.........../.\...........*
 *........../...\..........→........../...\..........*
 *........./.....\.........→........./.....\.........*
 *........1.......R........→........n.......2........*
 *.............../.\.......→......./.\...............*
 *..............s...2......→......1...s..............*
 *.........................→.........................*/
    RBTNodeType childR = node->right;
    RBTNodeType parent = RBTM_GetParent(node);

    if( NULL == parent ) {
        RBTM_BindRoot(tree, childR);
    } else {
        if(parent->left == node) {
            RBTM_BindLeft(parent, childR);
        } else {
            RBTM_BindRight(parent, childR);
        }
    }
    RBTM_BindRight(node, childR->left);
    RBTM_BindLeft(childR, node);
}

static void rbtree_rotateRight(RBTreeType tree, RBTNodeType node) {
/*.........................→.........................*
 *..........p...p..........→..........p...p..........*
 *...........\./...........→...........\./...........*
 *............n............→............L............*
 *.........../.\...........→.........../.\...........*
 *........../...\..........→........../...\..........*
 *........./.....\.........→........./.....\.........*
 *........L.......1........→........2.......n........*
 *......./.\...............→.............../.\.......*
 *......2...s..............→..............s...1......*
 *.........................→.........................*/
    RBTNodeType childL = node->left;
    RBTNodeType parent = RBTM_GetParent(node);

    if( NULL == parent ) {
        RBTM_BindRoot(tree, childL);
    } else {
        if(parent->left == node) {
            RBTM_BindLeft(parent, childL);
        } else {
            RBTM_BindRight(parent, childL);
        }
    }
    RBTM_BindLeft(node, childL->right);
    RBTM_BindRight(childL, node);
}
